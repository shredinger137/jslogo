;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Evaporation ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to go  
	print 'Starting Project'
    make "startTime now

    ;makes the needed calibration lists
    make "temp0_cal [116 0 161 26] ;the calibration list for an average of 10 readings from tempsensor0
	make "temp1_cal [116 0 161 26] ;the calibration list for an average of 10 readings from tempsensor1
    make "temp0-data []
    make "temp1-data []
    make "time-list []
    make "temp0-data-calibrated []

    init-plot
    
    loop [
        make "timeElapsed now - :startTime
        if (:timeElapsed > (60 * 60)) [stop]
        receive-packet
        logData :_last-packet
        process-data-packet
        wait 10
    ]

end


;handles a packet after it has been received
to process-data-packet
    
    ;add the readings from the two sensors to the two lists
    push "temp0-data nth 1 :_last-packet
    push "temp1-data nth 2 :_last-packet

    ;array time-list has seconds since run started
    push "time-list :timeElapsed
    

    calibrate-list "temp0-data-calibrated :temp0-data :temp0_cal ;calibrate list of ADU into list of Deg C
    calibrate-list "temp1-data-calibrated :temp1-data :temp1_cal ;calibrate list of ADU into list of Deg C  	
		
end

to init-plot
    top-plot
    plot-title 'Temp 0'
    x-data "time-list
    y-data "temp0-data-calibrated
    x-label 'Time (sec)'
    y-label 'Temp (deg)'
    show-plot

    bottom-plot
    plot-title 'Temp 1'
    x-data "time-list
    y-data "temp1-data-calibrated
    x-label 'Time (sec)'
    y-label 'Temp (deg)'
    show-plot
end

;find the minimum value of temperature
;TODO: This hasn't been tested and probably doesn't work
to calc-min
	make "temp-min MinEntry :temp0-list ;find the minimum value of temperature
	let [temp-index itempos :temp-min :temp0-list] ;find its position in the list
	make "temp-time item :temp-index :time-list ;find the corresponding value of time
end

