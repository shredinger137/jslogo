[{"C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\index.js":"1","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\App.js":"2","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\serviceWorker.js":"3","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\interpreter\\includes.js":"4","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\Projects.js":"5","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\Header.js":"6","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\JSLogoWorkspace.js":"7","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\NewProjectModal.js":"8","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\TurtleLogoWorkspace.js":"9","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\editorOptions.js":"10","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\interpreter\\Interpreter.js":"11","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\data\\experiments.js":"12","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\DataTable.js":"13","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\Chart.js":"14","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\interpreter\\turtleMath.js":"15","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\interpreter\\Tokenizer.js":"16"},{"size":518,"mtime":1601498220750,"results":"17","hashOfConfig":"18"},{"size":8531,"mtime":1606937670466,"results":"19","hashOfConfig":"18"},{"size":5320,"mtime":1606936330548,"results":"20","hashOfConfig":"18"},{"size":273,"mtime":1606854329579,"results":"21","hashOfConfig":"18"},{"size":2562,"mtime":1606937621551,"results":"22","hashOfConfig":"18"},{"size":1959,"mtime":1604614520308,"results":"23","hashOfConfig":"18"},{"size":4057,"mtime":1605124497349,"results":"24","hashOfConfig":"18"},{"size":2858,"mtime":1606937020972,"results":"25","hashOfConfig":"18"},{"size":2597,"mtime":1605815694901,"results":"26","hashOfConfig":"18"},{"size":2294,"mtime":1604614566798,"results":"27","hashOfConfig":"18"},{"size":52099,"mtime":1605815854554,"results":"28","hashOfConfig":"18"},{"size":224,"mtime":1604535772601,"results":"29","hashOfConfig":"18"},{"size":1222,"mtime":1605052272493,"results":"30","hashOfConfig":"18"},{"size":4481,"mtime":1605642529604,"results":"31","hashOfConfig":"18"},{"size":361,"mtime":1601053562509,"results":"32","hashOfConfig":"18"},{"size":2737,"mtime":1601053562508,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1bmk010",{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\index.js",[],["72","73"],"C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\App.js",["74","75","76","77"],"C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\serviceWorker.js",[],"C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\interpreter\\includes.js",[],"C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\Projects.js",["78","79"],"C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\Header.js",["80","81","82","83","84"],"import React, { Component } from 'react';\r\nimport '../css/styles.css';\r\nimport '../css/layout.css';\r\nimport Projects from './Projects.js';\r\nvar projects;\r\n\r\nexport default class Header extends Component {\r\n\r\n    componentDidMount() {\r\n        projects = new Projects();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    loadFile() {\r\n        document.getElementById(\"load\").click();\r\n        document.getElementById(\"procs\").focus();\r\n    }\r\n\r\n    saveAs() {\r\n        projects.saveAs();\r\n    }\r\n\r\n    toggleNewProject() {\r\n        this.props.toggleNewProjectModal();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <span style={{ width: \"10px\" }}></span>\r\n                <div className=\"buttonDiv\" onClick={() => this.toggleNewProject()}>\r\n                    <img src=\"/images/newProject.png\"></img>\r\n                    <span>New Project</span>\r\n                </div>\r\n                <div className=\"buttonDiv\" onClick={() => this.saveAs()}>\r\n                    <img src=\"/images/download.png\"></img>\r\n                    <span>Save File</span>\r\n                </div>\r\n                <div className=\"buttonDiv\" onClick={() => this.loadFile()}>\r\n                    <img src=\"/images/upload.png\"></img>\r\n                    <span>Load File</span>\r\n                </div>\r\n                <div id=\"connectButton\" className=\"buttonDiv\" style={{ minWidth: \"100px\", position: \"fixed\", right: \"50px\" }}>\r\n                    <img src=\"/images/connect-icon.png\"></img>\r\n                    <span>Connect</span>\r\n                </div>\r\n                <div id=\"disconnectButton\" className=\"buttonDiv\" style={{ display: \"none\", position: \"fixed\", right: \"50px\" }}>\r\n                    <img src=\"/images/connect-icon.png\"></img>\r\n                    <span>Disconnect</span>\r\n                </div>\r\n                <span style={{ width: \"10px\" }}></span>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\JSLogoWorkspace.js",["85","86","87","88","89"],"import React, { Component } from 'react';\r\nimport '../css/styles.css';\r\nimport '../css/layout.css';\r\nimport MonacoEditor from 'react-monaco-editor';\r\nimport { options, languageDef, configuration } from './editorOptions'\r\nimport Chart from './Chart';\r\nimport DataTable from './DataTable';\r\n\r\n//Create a conditional for chart state. Running 'initchart (argument)' sets state, so you display whatever data. \r\n//For multiple charts, try using an argument for 'which chart'. So, 'chartpush 1 5 4' adds point 5,4 to the first chart; 'chartpush 2 5 4' to chart 2. So forth.\r\n//This doesn't cover overlay. Might be good to get a write up on which charts are needed, because those all have to be coded separately.\r\n//These functions also all have to be passed to Interpreter to make them able to manage state, unless you want to switch to global\r\n\r\nvar interpreter;\r\n\r\nexport default class JSLogo extends Component {\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(this.props.code);\r\n    console.log(this.props);\r\n  }\r\n\r\n\r\n  editorWillMount = monaco => {\r\n    this.editor = monaco\r\n    if (!monaco.languages.getLanguages().some(({ id }) => id === 'jslogo')) {\r\n      // Register a new language\r\n      monaco.languages.register({ id: 'jslogo' })\r\n      // Register a tokens provider for the language\r\n      monaco.languages.setMonarchTokensProvider('jslogo', languageDef)\r\n      // Set the editing configuration for the language\r\n      monaco.languages.setLanguageConfiguration('jslogo', configuration)\r\n    }\r\n\r\n    monaco.editor.defineTheme('jslogo', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'custom-words', foreground: 'FFFD8A' },\r\n      ],\r\n      colors: {\r\n      },\r\n    });\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    const options = {\r\n      selectOnLineNumbers: true,\r\n      automaticLayout: true,\r\n      minimap: {\r\n        enabled: false\r\n      },\r\n    };\r\n    return (\r\n      <>\r\n        <div className=\"interfaceGridCode\">\r\n          <div className=\"codeEntry\" id=\"codeEntryDiv\" style={{ border: \"1px solid black\", maxHeight: \"75vh\", minHeight: \"50vh\" }}>\r\n            <div id=\"editor\" class={this.props.view == \"main\" ? null : \"hide\"} style={{ height: \"100%\", width: \"100%\" }}>\r\n              <MonacoEditor\r\n                language=\"jslogo\"\r\n                theme=\"jslogo\"\r\n                value={this.props.code}\r\n                options={options}\r\n                onChange={this.props.updateCode}\r\n                editorDidMount={this.props.editorDidMount}\r\n                editorWillMount={this.editorWillMount}\r\n              />\r\n            </div>\r\n            <div id=\"chartFrame\" className={this.props.view == \"graph\" ? null : \"hide\"} style={{ height: \"100%\", width: \"100%\" }}>\r\n              <Chart\r\n                chartType={this.props.chartType}\r\n              />\r\n\r\n            </div>\r\n            <div id=\"dataFrame\" className={this.props.view == \"data\" ? null : \"hide\"} style={{ height: \"100%\", width: \"100%\" }}>\r\n              <DataTable\r\n                tableData={this.props.tableData}\r\n              />\r\n            </div>\r\n            <textarea id=\"procs\" spellCheck=\"false\" onChange={this.props.countLineAndSetState} style={{ whiteSpace: \"nowrap\", display: \"none\" }} value={this.props.code}>\r\n            </textarea>\r\n            <textarea id=\"includes\" spellCheck=\"false\" style={{ display: \"none\", whiteSpace: \"nowrap\", overflow: \"visible\" }} />\r\n          </div>\r\n\r\n\r\n          <div className=\"terminal\" id=\"terminal\">\r\n            <textarea id=\"cc\" onKeyDown={(e) => this.props.interpreter.handleCCKeyDown(e)} ></textarea>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"chartArea\" style={{ display: \"none\" }}>\r\n          <div id=\"cnvframe\" style={{ height: \"100%\", width: \"100%\" }}>\r\n            <canvas className=\"cnv\" id=\"canvas\" ></canvas>\r\n          </div>\r\n          <div id=\"chartFrame\" className=\"hide\" style={{ height: \"100%\", width: \"100%\" }}>\r\n            <p>Chart goes here</p>\r\n\r\n          </div>\r\n        </div>\r\n      </>\r\n\r\n\r\n    )\r\n  }\r\n\r\n}","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\NewProjectModal.js",["90"],"import React, { Component } from 'react';\r\nimport '../css/styles.css';\r\nimport '../css/layout.css';\r\nimport { experimentsList } from '../data/experiments.js'\r\n\r\nexport default class NewProjectModal extends Component {\r\n\r\n    state = {\r\n        projectsAvailable: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getAvailableProjects();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    getAvailableProjects() {\r\n        if (experimentsList) {\r\n            this.setState({\r\n                projectsAvailable: experimentsList\r\n            })\r\n        }\r\n    }\r\n\r\n    loadCodeFromProject(projectName) {\r\n        //TODO: We're not using the 'unsaved changes' value correctly. We should not prompt if it's not unsaved.\r\n        //TODO: Eventually all files will have a 'fileLocation' field, in which case this conditional can be removed.\r\n\r\n        var scopedUpdateCode = this.props.updateCode;\r\n\r\n        if (this.props.unsavedChanges) {\r\n            if (window.confirm(\"Any unsaved changes will be lost. Continue?\")) {\r\n                for (var project of this.state.projectsAvailable) {\r\n                    if (project.name === projectName) {\r\n                        if (project.fileLocation) {\r\n                            var request = new XMLHttpRequest();\r\n                            request.open('GET', project.fileLocation, true);\r\n                            request.send(null);\r\n                            request.onreadystatechange = function () {\r\n                                if (request.readyState === 4 && request.status === 200) {\r\n                                    scopedUpdateCode(request.responseText);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            console.log(\"error: no filename specified\");\r\n                        }\r\n                    }\r\n                    this.props.toggleModal();\r\n                }\r\n            } else {\r\n                this.props.toggleModal();\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"newProjectModal\" className=\"modal\">\r\n                <div className=\"modalContent\">\r\n                    <span className=\"close\" onClick={() => this.props.toggleModal()}>&times;</span>\r\n                    <h3>New Project</h3>\r\n                    <br />\r\n                    <div>\r\n                        {this.state.projectsAvailable.map(project => (\r\n                            <div key={project.name + \"div\"}>\r\n                                <span onClick={() => { this.loadCodeFromProject(project.name) }} key={project.name}>{project.name}</span><br />\r\n                            </div>\r\n                        )\r\n                        )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\TurtleLogoWorkspace.js",[],"C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\editorOptions.js",[],"C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\interpreter\\Interpreter.js",["91","92"],"/* eslint eqeqeq: \"off\", no-extend-native: \"off\", no-throw-literal: \"off\", no-use-before-define: \"off\" */\r\n\r\n//TODO: Change to contenteditable div for code entry, to improve styling. Change 'value' to 'innerHTML' to accomodate this.\r\n\r\n\r\nimport Tokenizer from './Tokenizer';\r\nimport turtleMath from './turtleMath';\r\nimport {includes} from './includes';\r\n\r\nNumber.prototype.mod = function (n) { return ((this % n) + n) % n; }\r\n\r\nvar constants = {\r\n    black: '-9999&0', white: '-9999&100', red: '0&50', green: '30&50', blue: '70&50',\r\n    cyan: '50&50', magenta: '90&50', yellow: '20&50', orange: '14&50'\r\n}\r\nvar port;\r\nvar reader;\r\nvar flushtime = 200;\r\nvar outputStream;\r\n\r\nexport default class Interpreter {\r\n\r\n    constructor(canvasHeight, canvasWidth, addToChart, pushToTable) {\r\n        this.allReceivedData = [0];\r\n        this.ticker = this.ticker.bind(this);\r\n        this.isDone = this.isDone.bind(this);\r\n\r\n        this.addToChart = addToChart;\r\n        this.pushToTable = pushToTable;\r\n        //turtle\r\n\r\n        this.cnvWidth = canvasWidth;\r\n        this.cnvHeight = canvasHeight;\r\n        // this.img;\r\n        this.ctx = document.getElementById('canvas');\r\n        this.xcor = 0;\r\n        this.ycor = 0;\r\n        //this.element;\r\n        this.heading = 0;\r\n        this.color = 0;\r\n        //shade started off at 50 in the previous version. Unclear on why. Zero works a lot better, 50 kept giving us red.\r\n        this.shade = 50;\r\n        this.opacity = 1;\r\n        this.pendown = true;\r\n        this.pensize = 1;\r\n        this.size = 70;\r\n        this.font = \"sans-serif\";\r\n        this.fontsize = 30;\r\n        this.dpi = 1;\r\n        this.zoom = 1;\r\n        this.snaps = {};\r\n        this.scatterChart = \"\";\r\n        this.colors = [\r\n            0xFF0000, 0xFF0D00, 0xFF1A00, 0xFF2600, 0xFF3300, 0xFF4000, 0xFF4D00, 0xFF5900, 0xFF6600, 0xFF7300,\r\n            0xFF8000, 0xFF8C00, 0xFF9900, 0xFFA600, 0xFFB300, 0xFFBF00, 0xFFCC00, 0xFFD900, 0xFFE600, 0xFFF200,\r\n            0xFFFF00, 0xE6FF00, 0xCCFF00, 0xB3FF00, 0x99FF00, 0x80FF00, 0x66FF00, 0x4DFF00, 0x33FF00, 0x1AFF00,\r\n            0x00FF00, 0x00FF0D, 0x00FF1A, 0x00FF26, 0x00FF33, 0x00FF40, 0x00FF4D, 0x00FF59, 0x00FF66, 0x00FF73,\r\n            0x00FF80, 0x00FF8C, 0x00FF99, 0x00FFA6, 0x00FFB3, 0x00FFBF, 0x00FFCC, 0x00FFD9, 0x00FFE6, 0x00FFF2,\r\n            0x00FFFF, 0x00F2FF, 0x00E6FF, 0x00D9FF, 0x00CCFF, 0x00BFFF, 0x00B3FF, 0x00A6FF, 0x0099FF, 0x008CFF,\r\n            0x0080FF, 0x0073FF, 0x0066FF, 0x0059FF, 0x004DFF, 0x0040FF, 0x0033FF, 0x0026FF, 0x001AFF, 0x000DFF,\r\n            0x0000FF, 0x0D00FF, 0x1A00FF, 0x2600FF, 0x3300FF, 0x4000FF, 0x4D00FF, 0x5900FF, 0x6600FF, 0x7300FF,\r\n            0x8000FF, 0x8C00FF, 0x9900FF, 0xA600FF, 0xB300FF, 0xBF00FF, 0xCC00FF, 0xD900FF, 0xE600FF, 0xF200FF,\r\n            0xFF00FF, 0xFF00E6, 0xFF00CC, 0xFF00B3, 0xFF0099, 0xFF0080, 0xFF0066, 0xFF004D, 0xFF0033, 0xFF001A,\r\n            0xFF0000];\r\n\r\n\r\n        //procs js\r\n        var t = this;\r\n\r\n        this.procs = document.getElementById(\"procs\");\r\n        this.procs.onfocus = function () { this.focused = true; };\r\n        this.procs.onblur = function () { this.focused = false; t.readProcs() };\r\n        this.procs.onkeydown = handleKeyDown;\r\n\r\n        function handleKeyDown(e) {\r\n            if (e.ctrlKey) {\r\n                if (e.keyCode == 70) { e.preventDefault(); e.stopPropagation(); this.focus(); }\r\n                if (e.keyCode == 71) { e.preventDefault(); e.stopPropagation(); t.readProcs(); this.runLine('go'); }\r\n                if (e.keyCode == 190) { this.insert('stopped!\\n'); this.reset([]); }\r\n            }\r\n        }\r\n\r\n        //logo js\r\n        this.evline = [];\r\n        this.cfun = undefined;\r\n        this.arglist = [];\r\n        this.priority = 0;\r\n        this.stack = [];\r\n        this.frame = [];\r\n        this.locals = [{}];\r\n        this.hold = false;\r\n        this.timeout = undefined;\r\n        this.clockspeed = 1;\r\n\r\n        //cc js\r\n        this.commandConsole = document.getElementById('cc');\r\n        this.commandConsole.autocapitalize = 'off';\r\n        this.commandConsole.autocorrect = 'off';\r\n        this.commandConsole.autocomplete = 'off';\r\n        this.commandConsole.spellcheck = false;\r\n        this.commandConsole.focused = false;\r\n\r\n        this.commandConsole.selectionStart = this.commandConsole.value.length + 1;\r\n        this.commandConsole.selectionEnd = this.commandConsole.value.length + 1;\r\n\r\n        this.respfcn = undefined;\r\n        this.respCount = 0;\r\n        this.resp = [];\r\n        this.respStr = '';\r\n        this.fe = undefined;\r\n\r\n    }\r\n\r\n\r\n    openText() {\r\n\r\n    }\r\n\r\n\r\n    setup() {\r\n\r\n        var t = this;\r\n        //commented out sept. 2020 - doesn't seem to be needed\r\n        // var procs = document.getElementById('procs');\r\n        // procs.focus();\r\n        this.element = document.createElement('div');\r\n        this.element.setAttribute('class', 'turtle');\r\n        var cnvframe = document.getElementById('cnvframe');\r\n        cnvframe.appendChild(t.element);\r\n        this.img = document.createElement('img');\r\n        this.img.src = 'turtle.svg';\r\n        this.element.appendChild(t.img);\r\n        this.img.onload = imgLoaded;\r\n        var canvas = document.getElementById('canvas');\r\n        this.ctx = canvas.getContext('2d');\r\n        canvas.width = t.cnvWidth * t.dpi;\r\n        canvas.height = t.cnvHeight * t.dpi;\r\n        t.ctx.scale(t.dpi, t.dpi);\r\n        t.ctx.textBaseline = \"middle\";\r\n        t.clean();\r\n        window.requestAnimationFrame(this.ticker);\r\n\r\n\r\n\r\n        function imgLoaded() {\r\n            t.img.width = t.size;\r\n            t.img.height = t.size;\r\n            t.element.style.width = t.size + 'px';\r\n            t.element.style.height = t.size + 'px';\r\n            t.move();\r\n        }\r\n\r\n    }\r\n\r\n    handleCCKeyDown(e) {\r\n        var k = e.keyCode;\r\n        if (k == 13) {\r\n            if (e.shiftKey) this.insertcr(e);\r\n            else this.handlecr(e);\r\n        }\r\n        if (e.ctrlKey) {\r\n            if (e.keyCode == 70) { e.preventDefault(); e.stopPropagation(); }\r\n            if (e.keyCode == 71) { e.preventDefault(); e.stopPropagation(); this.runLine('go'); }\r\n            if (e.keyCode == 190) { this.insert('stopped!\\n'); this.reset([]); }\r\n        }\r\n    }\r\n\r\n    handlecr(e) {\r\n        var pos = document.getElementById('cc').selectionStart;\r\n        var t = document.getElementById('cc').value;\r\n        var start = t.lastIndexOf('\\n', pos - 1), end = t.indexOf('\\n', pos);\r\n        if (end < 0) end = t.length;\r\n        document.getElementById('cc').selectionStart = end + 1;\r\n        if (end != t.length) e.preventDefault();\r\n        var str = t.substring(start + 1, end);\r\n        this.runLine(str);\r\n    }\r\n\r\n    insertcr(e) {\r\n        e.preventDefault();\r\n        var pos = document.getElementById('cc').selectionStart;\r\n        var t = document.getElementById('cc').value;\r\n        var before = t.substring(0, pos);\r\n        var after = t.substring(pos);\r\n        document.getElementById('cc').value = before + '\\n' + after;\r\n        document.getElementById('cc').selectionStart = pos + 1;\r\n        document.getElementById('cc').selectionEnd = pos + 1;\r\n    }\r\n\r\n    /////////////////////////\r\n    //\r\n    // Turtle\r\n    //\r\n    /////////////////////////\r\n\r\n\r\n    forward(n) {\r\n\r\n        var t = this;\r\n        if (t.pendown) {\r\n            t.ctx.beginPath();\r\n            t.ctx.moveTo(t.xcor + t.cnvWidth / 2, t.cnvHeight / 2 - t.ycor);\r\n\r\n        }\r\n        t.xcor += n * turtleMath.sindeg(t.heading);\r\n        t.ycor += n * turtleMath.cosdeg(t.heading);\r\n        if (t.pendown) {\r\n            var sx = t.xcor + t.cnvWidth / 2, sy = t.cnvHeight / 2 - t.ycor;\r\n            if (n >= .1) t.ctx.lineTo(sx, sy);\r\n            else t.ctx.lineTo(sx, sy + .1);\r\n            if (t.pensize != 0) t.ctx.stroke();\r\n            if (t.fillpath) t.fillpath.push(function () { this.ctx.lineTo(sx, sy); });\r\n        }\r\n    }\r\n\r\n    lineto(x, y) {\r\n        var t = this;\r\n        if (t.pendown) {\r\n            t.ctx.beginPath();\r\n            t.ctx.moveTo(t.xcor + t.cnvWidth / 2, t.cnvHeight / 2 - t.ycor);\r\n        }\r\n        t.xcor = x;\r\n        t.ycor = y;\r\n        if (t.pendown) {\r\n\r\n            var sx = t.xcor + t.cnvWidth / 2, sy = t.cnvHeight / 2 - t.ycor;\r\n            if ((x + y) >= .1) t.ctx.lineTo(sx, sy);\r\n            else t.ctx.lineTo(sx, sy + .1);\r\n            if (t.pensize != 0) t.ctx.stroke();\r\n            if (t.fillpath) t.fillpath.push(function () { this.ctx.lineTo(sx, sy); });\r\n        }\r\n    }\r\n\r\n    setxy(x, y) {\r\n        var t = this;\r\n        t.xcor = x;\r\n        t.ycor = y;\r\n        var sx = t.xcor + t.cnvWidth / 2, sy = t.cnvHeight / 2 - t.ycor;\r\n        if (t.fillpath) t.fillpath.push(function () { this.ctx.moveTo(sx, sy); });\r\n    }\r\n\r\n    right(n) { this.seth(this.heading + n); }\r\n    left(n) { this.seth(this.heading - n); }\r\n    seth(a) {\r\n        this.heading = a;\r\n        this.heading = (this.heading % 360);\r\n    }\r\n\r\n    arc(a, r) {\r\n        var t = this;\r\n        if (a == 0) return;\r\n        if (r == 0) { t.seth(t.heading + a); }\r\n        else if (a < 0) leftArc(a, r);\r\n        else rightArc(a, r);\r\n\r\n        function rightArc(a, r) {\r\n            var sgn = r / Math.abs(r);\r\n            var ar = Math.abs(r);\r\n            var dx = ar * turtleMath.cosdeg(t.heading);\r\n            var dy = ar * turtleMath.sindeg(t.heading);\r\n            var cx = t.xcor + dx;\r\n            var cy = t.ycor - dy;\r\n            if (t.pendown) {\r\n                var sx = t.cnvWidth / 2 + cx, sy = t.cnvHeight / 2 - cy;\r\n                var astart = turtleMath.rad(t.heading + 180.0), aend = turtleMath.rad(t.heading + 180 + a * sgn);\r\n                if ((a % 360) == 0) aend += .0001;\r\n                var dir = r < 0;\r\n                t.ctx.beginPath();\r\n                t.ctx.moveTo(t.xcor + t.cnvWidth / 2, t.cnvHeight / 2 - t.ycor);\r\n                t.ctx.arc(sx, sy, ar, astart, aend, dir);\r\n                if (t.pensize != 0) t.ctx.stroke();\r\n                if (t.fillpath) t.fillpath.push(function () { this.ctx.arc(sx, sy, ar, astart, aend, dir); });\r\n            }\r\n            t.seth(t.heading + a * sgn);\r\n            t.xcor = cx - ar * turtleMath.cosdeg(t.heading);\r\n            t.ycor = cy + ar * turtleMath.sindeg(t.heading);\r\n        }\r\n\r\n        function leftArc(a, r) {\r\n            var sgn = r / Math.abs(r);\r\n            var ar = Math.abs(r);\r\n            var dx = ar * turtleMath.cosdeg(t.heading);\r\n            var dy = ar * turtleMath.sindeg(t.heading);\r\n            var cx = t.xcor - dx;\r\n            var cy = t.ycor + dy;\r\n            if (t.pendown) {\r\n                var sx = t.cnvWidth / 2 + cx, sy = t.cnvHeight / 2 - cy;\r\n                var astart = turtleMath.rad(t.heading), aend = turtleMath.rad(t.heading + a * sgn);\r\n                var dir = r >= 0;\r\n                if ((a % 360) == 0) aend += .0001;\r\n                t.ctx.beginPath();\r\n                t.ctx.moveTo(t.xcor + t.cnvWidth / 2, t.cnvHeight / 2 - t.ycor);\r\n                t.ctx.arc(sx, sy, ar, astart, aend, dir);\r\n                if (t.pensize != 0) t.ctx.stroke();\r\n                if (t.fillpath) t.fillpath.push(function () { this.ctx.arc(sx, sy, ar, astart, aend, dir); });\r\n            }\r\n            t.seth(t.heading + a * sgn);\r\n            t.xcor = cx + ar * turtleMath.cosdeg(t.heading);\r\n            t.ycor = cy - ar * turtleMath.sindeg(t.heading);\r\n        }\r\n    }\r\n\r\n    showTurtle() { this.element.style.visibility = 'visible'; }\r\n    hideTurtle() { this.element.style.visibility = 'hidden'; }\r\n\r\n    /////////////////////////\r\n    //\r\n    // Pen\r\n    //\r\n    /////////////////////////\r\n\r\n    fillscreen(c, s) {\r\n\r\n        if ((typeof c) == 'object') c = c[0];\r\n        this.setCtxColorShade(c, s);\r\n        this.ctx.fillRect(0, 0, this.cnvWidth, this.cnvHeight);\r\n        this.setCtxColorShade(this.color, this.shade);\r\n    }\r\n\r\n    setcolor(c) {\r\n\r\n        if ((typeof c) == 'object') { this.color = c[0]; this.shade = c[1]; }\r\n        else this.color = c;\r\n        this.setCtxColorShade(this.color, this.shade);\r\n    }\r\n\r\n    setshade(sh) {\r\n        this.shade = sh;\r\n        this.setCtxColorShade(this.color, this.shade);\r\n    }\r\n\r\n    setpensize(ps) {\r\n        this.pensize = ps;\r\n        this.ctx.lineWidth = Math.abs(this.pensize);\r\n    }\r\n\r\n    startfill() {\r\n        this.fillpath = [];\r\n        var sx = this.xcor + this.cnvWidth / 2, sy = this.cnvHeight / 2 - this.ycor;\r\n        this.fillpath.push(function () { this.ctx.moveTo(sx, sy); });\r\n    }\r\n\r\n    endfill() {\r\n        if (!this.fillpath) return\r\n        this.ctx.beginPath();\r\n        for (var i in this.fillpath) {\r\n            if (i > 2000) break;\r\n            this.fillpath[i]();\r\n        }\r\n        this.ctx.globalAlpha = this.opacity;\r\n        this.ctx.fill();\r\n        this.ctx.globalAlpha = 1;\r\n        this.fillpath = undefined;\r\n    }\r\n\r\n    setlinedash(l) {\r\n        this.ctx.setLineDash(l);\r\n    }\r\n\r\n    /////////////////////////\r\n    //\r\n    // Text\r\n    //\r\n    /////////////////////////\r\n\r\n    drawString(str) {\r\n        var t = this;\r\n        t.ctx.save();\r\n        this.ctx.translate(t.xcor + t.cnvWidth / 2, t.cnvHeight / 2 - t.ycor);\r\n        t.ctx.rotate(turtleMath.rad(t.heading));\r\n        t.ctx.fillText(str, 0, 0);\r\n        t.ctx.restore();\r\n    }\r\n\r\n    drawLine(x, y){\r\n        var canvasElement = document.getElementById(\"testcanvas\");\r\n        var canvas = canvasElement.getContext(\"2d\");\r\n        canvas.beginPath();\r\n        canvas.moveTo(0,0);\r\n        canvas.lineTo(x, y);\r\n        canvas.stroke();\r\n    }\r\n\r\n    setfont(f) {\r\n        this.font = f;\r\n        this.ctx.font = this.fontsize + 'px ' + f;\r\n    }\r\n\r\n    setfontsize(s) {\r\n        this.fontsize = s;\r\n        this.ctx.font = s + 'px ' + this.font;\r\n    }\r\n\r\n\r\n    /////////////////////////\r\n    //\r\n    //  Basic stuff\r\n    //\r\n    /////////////////////////\r\n\r\n    move() {\r\n\r\n        var t = this;\r\n        if (!t.img.complete) return;\r\n        var img = t.element.firstChild;\r\n\r\n        var dx = screenLeft();\r\n        var dy = screenTop();\r\n        var s = 1;\r\n\r\n        t.element.style.webkitTransform = `translate(${dx}px, ${dy}px) rotate(${t.heading}deg) scale(${s}, ${s})`;\r\n        // 'translate(' + dx + 'px, ' + dy + 'px) rotate(' + t.heading + 'deg)' + ' scale(' + s + ',' + s + ')';\r\n        t.element.left = dx;\r\n        t.element.top = dy;\r\n\r\n        function screenLeft() {\r\n            return -img.width / 2 + (t.xcor + t.cnvWidth / 2);\r\n        }\r\n        function screenTop() {\r\n            return -img.height / 2 + (t.cnvHeight / 2 - t.ycor);\r\n        }\r\n\r\n    }\r\n\r\n    clean() {\r\n        var t = this;\r\n        var t = this;\r\n        this.xcor = 0;\r\n        t.ycor = 0;\r\n        t.heading = 0;\r\n        t.setCtxColorShade(-9999, 98); // #FAFAFA\r\n        t.ctx.fillRect(0, 0, t.cnvWidth, t.cnvHeight);\r\n        t.color = 0;\r\n        t.shade = 50;\r\n        t.setCtxColorShade(t.color, t.shade);\r\n        t.pensize = 4;\r\n        t.ctx.lineWidth = t.pensize;\r\n        t.opacity = 1;\r\n        t.pendown = true;\r\n        t.fillpath = undefined;\r\n        t.ctx.lineCap = 'round';\r\n        t.ctx.lineJoin = 'round';\r\n        t.font = 'sans-serif';\r\n        t.fontsize = 30;\r\n        t.ctx.font = '30px sans-serif';\r\n        t.ctx.textAlign = 'center';\r\n        t.ctx.setLineDash([]);\r\n        t.showTurtle();\r\n    }\r\n\r\n    /////////////////////////\r\n    //\r\n    // loader\r\n    //\r\n    /////////////////////////\r\n\r\n    loadimg(dataurl, fcn) {\r\n        var t = this;\r\n        var ctx = this.ctx;\r\n        var img = new Image();\r\n        img.onload = drawImageToFit;\r\n        img.src = dataurl;\r\n\r\n        function drawImageToFit() {\r\n            var s = t.cnvWidth / img.naturalWidth;\r\n            ctx.save();\r\n            ctx.scale(s, s);\r\n            ctx.drawImage(img, 0, 0);\r\n            ctx.restore();\r\n            if (fcn) fcn();\r\n        }\r\n    }\r\n\r\n    loadpng(dataurl, fcn) {\r\n        var t = this;\r\n        var ctx = this.ctx;\r\n        var img = new Image();\r\n        img.onload = drawImageToFit;\r\n        img.src = dataurl;\r\n\r\n        function drawImageToFit() {\r\n            var code = readHiddenData();\r\n            if (!procs) { var procs = { value: \"null\" }; }\r\n            procs.value = (code == 'bad sig') ? '' : code;\r\n            var s = t.cnvWidth / img.naturalWidth;\r\n            ctx.save();\r\n            ctx.scale(s, s);\r\n            ctx.drawImage(img, 0, 0);\r\n            ctx.restore();\r\n            this.readProcs();\r\n            if (fcn) fcn();\r\n        }\r\n\r\n        function readHiddenData() {\r\n            var cnv = document.createElement(\"canvas\");\r\n            cnv.width = img.naturalWidth;\r\n            cnv.height = img.naturalHeight;\r\n            var ctx = cnv.getContext('2d');\r\n            ctx.imageSmoothingEnabled = false;\r\n            ctx.drawImage(img, 0, 0);\r\n            return ImageData.getImageData(ctx);\r\n        }\r\n    }\r\n\r\n\r\n    /////////////////////////\r\n    //\r\n    // Low Level\r\n    //\r\n    /////////////////////////\r\n\r\n\r\n    setCtxColorShade(color, shade) {\r\n        var t = this;\r\n        setCtxColor(mergeColorShade(color, shade));\r\n\r\n        function mergeColorShade(color, shade) {\r\n            var sh = Math.abs(shade.mod(200));\r\n            if (sh > 100) sh = 200 - sh;\r\n            if (color == -9999) return blend(0x000000, 0xffffff, sh / 100);\r\n            var c = colorFromNumber(color);\r\n            if (sh == 50) return c;\r\n            else if (sh < 50) return blend(c, 0x000000, (50 - sh) / 60);\r\n            else return blend(c, 0xffffff, (sh - 50) / 53);\r\n        }\r\n\r\n        function colorFromNumber(c) {\r\n            var mc = c.mod(100);\r\n            var ic = Math.floor(mc);\r\n            var fract = mc - ic;\r\n            return blend(t.colors[ic], t.colors[ic + 1], fract);\r\n        }\r\n\r\n        function blend(a, b, s) {\r\n            var ar = (a >> 16) & 0xff, ag = (a >> 8) & 0xff, ab = a & 0xff;\r\n            var br = (b >> 16) & 0xff, bg = (b >> 8) & 0xff, bb = b & 0xff;\r\n            var rr = Math.round(ar * (1 - s) + br * s);\r\n            var rg = Math.round(ag * (1 - s) + bg * s);\r\n            var rb = Math.round(ab * (1 - s) + bb * s);\r\n            return (rr << 16) + (rg << 8) + rb;\r\n        }\r\n\r\n        function setCtxColor(c) {\r\n            var cc = '#' + (c + 0x1000000).toString(16).substring(1);\r\n            t.ctx.strokeStyle = cc;\r\n            t.ctx.fillStyle = cc;\r\n        }\r\n\r\n    }\r\n\r\n    parse(s) { return new Tokenizer(s).tokenize(); }\r\n\r\n    //procs js\r\n    readProcs() {\r\n        var procs = document.getElementById(\"procs\").value;\r\n        var toBeEvaluated = procs + \"\\n\" + includes;\r\n        this.procString(toBeEvaluated, 'normal');\r\n\r\n    }\r\n\r\n    //The only difference I saw so far was that Tokenize was called from the class before, and that's been replaced. Still not evaluating arguments passed to words.\r\n\r\n    procString(str, type) {\r\n        gatherSource();\r\n        parseProcs();\r\n\r\n        function gatherSource() {\r\n            var thisproc = undefined;\r\n            for (var i in prims) if ((prims[i].type) == 'normal') delete prims[i];\r\n            var lines = str.split('\\n');\r\n            for (var j = 0; j < lines.length; j++) procLines(lines[j]);\r\n\r\n\r\n            //TODO: This isn't passing values as arguments when words are defined. Meaning 'to something :n' doesn't see :n as having a value when you call 'something 5'.\r\n\r\n            function procLines(l) {\r\n                var sl = Tokenizer.parse(l);\r\n                if ((sl[0] == 'to') && (sl[1] != undefined)) {\r\n                    thisproc = sl[1];\r\n                    prims[thisproc] = { nargs: sl.length - 2 };\r\n                    prims[thisproc].fcn = '';\r\n                    prims[thisproc].inputs = sl.slice(2);\r\n                    prims[thisproc].type = type;\r\n                    return;\r\n                }\r\n                else if (sl[0] == 'end') { thisproc = undefined; return; }\r\n                if (thisproc == undefined) return;\r\n                prims[thisproc].fcn += (l + '\\n');\r\n                if (thisproc == \"something\") {\r\n                }\r\n            }\r\n        }\r\n\r\n        function parseProcs() {\r\n            for (var p in prims) {\r\n                var prim = prims[p];\r\n                var fcn = prim.fcn;\r\n                if ((typeof fcn) != 'string') continue;\r\n\r\n                if (prim.parsed) continue;\r\n                prim.parsed = Tokenizer.parse(fcn);\r\n\r\n\r\n                for (var i in prim.inputs) {\r\n                    if (prim.inputs[i].substring(0, 1) == ':') prim.inputs[i] = prim.inputs[i].substring(1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    //Ticker is the main loop - it continuously runs and updates movement, evaluating as it goes. Similar to frame updates in game frameworks.\r\n    //'Hold' freezes evaluation and shows up in other functions; move is turtle specific.\r\n\r\n    ticker() {\r\n        if (!this.isDone()) {\r\n            var end = this.now() + flushtime;\r\n            while (this.now() < end) {\r\n                if (this.hold) break;\r\n                if (this.isDone()) break;\r\n                this.evalNext();\r\n            }\r\n            this.move();\r\n        }\r\n        window.requestAnimationFrame(this.ticker);\r\n    }\r\n\r\n\r\n    //logo js\r\n    reset(l) {\r\n        this.evline = l;\r\n        this.cfun = undefined;\r\n        this.arglist = [];\r\n        this.priority = 0;\r\n        this.stack = [];\r\n        this.frame = [];\r\n\r\n\r\n        //This locals line had previously been commented out, as it broke make, but it seems to be working now. Delete this comment if it doesn't come up again.\r\n        //Commented August 2020\r\n        //NOTE: This locals line is still very suspicious. I still don't know why it exists or what, exactly, it's for.\r\n        this.locals = [this.last(this.locals)];\r\n\r\n        this.hold = false;\r\n        if (this.timeout != undefined) clearTimeout(this.timeout);\r\n        this.timeout = undefined;\r\n    }\r\n\r\n    printToConsole(x) {\r\n        var cc = document.getElementById(\"cc\");\r\n        cc.value = cc.value + x + \"\\n\";\r\n        cc.scrollTop = cc.scrollHeight;\r\n    }\r\n\r\n    evalNext() {\r\n        var t = this;\r\n        try {\r\n            if (t.cfun) {\r\n                if (t.arglist.length == prims[t.cfun].nargs) { funcall(); return; }\r\n                if ((prims[t.cfun].nargs == 'ipm') && (t.evline[0] == ')')) { t.evline.shift(); funcall(); return }\r\n            }\r\n            if (t.evline.length == 0) {\r\n                if (t.cfun == undefined) t.evalEOL();\r\n                else throw 'error: not enough inputs to ' + t.cfun;\r\n                return;\r\n            }\r\n            var token = t.evline.shift();\r\n            if ((typeof token) == 'string') evalString();\r\n            else t.pushResult(token);\r\n        }\r\n        catch (e) {\r\n            this.printToConsole(e);\r\n            t.stack = [];\r\n            t.evline = [];\r\n        }\r\n\r\n        function evalString() {\r\n            if (token.substring(0, 1) == ':') t.pushResult(t.getValue(token.substring(1)));\r\n            else if (token.substring(0, 1) == '\"') t.pushResult(token.substring(1));\r\n            else if ((token.substring(0, 1) == \"'\") && (token.slice(-1) == \"'\")) t.pushResult(token.substring(1, token.length - 1));\r\n            else if (constants[token]) t.pushResult(constants[token]);\r\n            else {\r\n                if (token == '(') handleParend();\r\n                if (prims[token] == undefined) throw \"error: I don't know how to \" + token;\r\n                t.stack.push(t.cfun);\r\n                t.stack.push(t.arglist);\r\n                t.stack.push(t.priority);\r\n                t.cfun = token;\r\n                t.arglist = [];\r\n                t.priority = 0;\r\n            }\r\n\r\n            function handleParend() {\r\n                if (t.evline[0] == 'se') { t.evline.shift(); token = 'se '; }\r\n                else token = '( ';\r\n            }\r\n        }\r\n\r\n        function funcall() {\r\n            if (prims[t.cfun].flow) prims[t.cfun].fcn.apply(t, t.arglist);\r\n            else if ((typeof prims[t.cfun].fcn) == 'function') primCall();\r\n            else if ((typeof prims[t.cfun].fcn) == 'string') procCall();\r\n        }\r\n\r\n\r\n        function primCall() {\r\n            var arglist = t.arglist;\r\n            var prim = t.cfun;\r\n            var res = prims[t.cfun].fcn.apply(t, arglist);\r\n            t.priority = t.stack.pop();\r\n            t.arglist = t.stack.pop();\r\n            t.cfun = t.stack.pop();\r\n            if ((res == undefined) && (t.cfun != undefined)) throw \"error:\" + prim + \" didn't output to \" + t.cfun;\r\n            t.pushResult(res);\r\n        }\r\n\r\n        function procCall() {\r\n            var cfun = t.cfun, arglist = t.arglist;\r\n            t.stack.push(t.evline);\r\n            t.stack.push(t.frame);\r\n            t.frame = [].concat(t.stack);\r\n            bindArgs();\r\n            t.evalLine(prims[cfun].parsed, t.procOutput);\r\n\r\n            function bindArgs() {\r\n                var bindings = {};\r\n                var inputs = prims[cfun].inputs;\r\n                for (var i in inputs) bindings[inputs[i]] = arglist[i];\r\n                t.locals.unshift(bindings);\r\n            }\r\n        }\r\n    }\r\n\r\n    pushResult(res) {\r\n        var t = this;\r\n        if (res == undefined) return;\r\n        if (t.cfun == undefined) throw \"warning: you don't say what to do with \" + t.printstr(res);\r\n        if (isInfixNext()) infixCall(res);\r\n        else t.arglist.push(res);\r\n\r\n        function infixCall(arg) {\r\n            t.stack.push(t.cfun);\r\n            t.stack.push(t.arglist);\r\n            t.stack.push(t.priority);\r\n            t.cfun = t.evline.shift();\r\n            t.arglist = [arg];\r\n            t.priority = prims[t.cfun].priority;\r\n        }\r\n\r\n        function isInfixNext() {\r\n            if (t.evline.length == 0) return false;\r\n            var token = t.evline[0];\r\n            if (prims[token] == undefined) return false;\r\n            if (prims[token].priority == undefined) return false;\r\n            return (prims[token].priority < t.priority);\r\n        }\r\n    }\r\n\r\n    getValue(name) {\r\n\r\n        for (var i in this.locals) {\r\n            if (this.locals[i][name] != undefined) return this.locals[i][name];\r\n        }\r\n        throw 'warning: ' + name + ' has no value';\r\n    }\r\n\r\n    setValue(name, value) {\r\n        var t = this;\r\n        for (var i in t.locals) {\r\n            if (t.locals[i][name] != undefined) {\r\n                t.locals[i][name] = value;\r\n                return;\r\n            }\r\n        }\r\n        t.locals[t.locals.length - 1][name] = value;\r\n    }\r\n\r\n    makeLocal(name) { this.locals[0][name] = 0; }\r\n\r\n    procOutput(t, x) {\r\n        if (t.frame.length == 0) {\r\n            if (x != undefined) throw \"error: output can only be used in a procedure.\";\r\n            this.reset([]);\r\n            return;\r\n        }\r\n        t.stack = t.frame;\r\n        t.frame = t.stack.pop();\r\n        t.evline = t.stack.pop();\r\n        t.priority = t.stack.pop();\r\n        t.arglist = t.stack.pop();\r\n        t.cfun = t.stack.pop();\r\n        //t.locals.shift();\r\n        t.pushResult(x);\r\n    }\r\n\r\n    evalLine(l, next) {\r\n        var t = this;\r\n        t.stack.push(t.cfun);\r\n        t.stack.push(t.arglist);\r\n        t.stack.push(t.evline);\r\n        t.stack.push(next);\r\n        t.cfun = undefined;\r\n        t.arglist = [];\r\n        t.evline = [].concat(l);\r\n    }\r\n\r\n    evalEOL() {\r\n        var t = this;\r\n        if (t.stack.length == 0) return;\r\n        var next = t.stack.pop();\r\n        t.evline = t.stack.pop();\r\n        t.arglist = t.stack.pop();\r\n        t.cfun = t.stack.pop();\r\n        next(t);\r\n    }\r\n\r\n    flowEnd() {\r\n        var t = this;\r\n        var prim = t.cfun;\r\n        t.priority = t.stack.pop();\r\n        t.arglist = t.stack.pop();\r\n        t.cfun = t.stack.pop();\r\n        if (t.cfun != undefined) throw \"error: \" + prim + \" didn't output to \" + t.cfun;\r\n    }\r\n\r\n    repeat(n, l) {\r\n        n = Math.round(this.getnum(n));\r\n        this.stack.push(n);\r\n        this.stack.push(l);\r\n        repeatAgain(this);\r\n\r\n        function repeatAgain(t) {\r\n            var l = t.stack.pop();\r\n            var n = t.stack.pop();\r\n            if (n <= 0) { t.flowEnd(); return; }\r\n            t.stack.push(--n);\r\n            t.stack.push(l);\r\n            t.evalLine(l, repeatAgain);\r\n        }\r\n    }\r\n\r\n    loop(l) {\r\n        this.stack.push(l);\r\n        loopAgain(this);\r\n\r\n        function loopAgain(t) {\r\n            var l = t.stack.pop();\r\n            t.stack.push(l);\r\n            t.evalLine(l, loopAgain);\r\n        }\r\n    }\r\n\r\n    logo_run(l) {\r\n        var t = this;\r\n        t.evalLine(l, next);\r\n\r\n        function next() {\r\n            t.flowEnd();\r\n        }\r\n    }\r\n\r\n    logo_if(b, l) {\r\n        var t = this;\r\n        if (!b) t.flowEnd();\r\n        else t.evalLine(l, next);\r\n\r\n        function next() {\r\n            t.flowEnd();\r\n        }\r\n    }\r\n\r\n    logo_ifelse(b, l1, l2) {\r\n        var t = this;\r\n        if (b) t.evalLine(l1, next);\r\n        else t.evalLine(l2, next);\r\n\r\n        function next() {\r\n            t.flowEnd();\r\n        }\r\n    }\r\n\r\n    ipm_se(l) {\r\n        var res = [];\r\n        for (var i = 0; i < l.length; i++) res = res.concat(l[i]);\r\n        return res;\r\n    }\r\n\r\n    item(n, l) {\r\n        n = this.getnum(n);\r\n        if ((typeof l) == 'object') return l[n - 1];\r\n        return String(l).substring(n - 1, n);\r\n    }\r\n\r\n    first(l) {\r\n        if ((typeof l) == 'object') return l[0];\r\n        return String(l).substring(0, 1);\r\n    }\r\n\r\n    butfirst(l) {\r\n        if ((typeof l) == 'object') return l.slice(1);\r\n        return String(l).substring(1);\r\n    }\r\n\r\n    last(l) {\r\n        if (l && (typeof l) == 'object') return l[l.length - 1];\r\n        return String(l).substring(String(l).length - 1);\r\n    }\r\n\r\n    butlast(l) {\r\n        if ((typeof l) == 'object') return l.slice(0, -1);\r\n        return String(l).substring(0, String(l).length - 1);\r\n    }\r\n\r\n    count(l) {\r\n        if ((typeof l) == 'object') return l.length;\r\n        return String(l).length;\r\n    }\r\n\r\n    word(a, b) {\r\n        if ((typeof a) == 'object') a = a.join(' ');\r\n        if ((typeof b) == 'object') b = b.join(' ');\r\n        return String(a) + String(b);\r\n    }\r\n\r\n    member(x, l) {\r\n        if ((typeof l) == 'object') {\r\n            for (var i = 0; i < l.length; i++) { if (this.equals(x, l[i])) return true; }\r\n            return false;\r\n        }\r\n        return String(l).indexOf(x) != -1;\r\n    }\r\n\r\n    time() {\r\n        var now = this.getDate();\r\n        var hour = now.getHours();\r\n        if (hour == 0) hour = 12;\r\n        if (hour > 12) hour -= 12;\r\n        return [hour, now.getMinutes(), now.getSeconds()];\r\n    }\r\n\r\n    hours() {\r\n        var now = this.getDate();\r\n        var hour = now.getHours();\r\n        var second = now.getSeconds();\r\n        var minute = now.getMinutes();\r\n        if (hour == 0) hour = 12;\r\n        if (hour > 12) hour -= 12;\r\n        hour += minute / 60;\r\n        hour += second / 3600;\r\n        return Math.floor(hour * 100) / 100;\r\n    }\r\n\r\n    minutes() {\r\n        var now = this.getDate();\r\n        var minute = now.getMinutes();\r\n        var second = now.getSeconds();\r\n        minute += second / 60;\r\n        return Math.floor(minute * 100) / 100;\r\n    }\r\n\r\n    seconds() {\r\n        var now = this.getDate();\r\n        var second = now.getSeconds();\r\n        var millis = now.getMilliseconds();\r\n        second += millis / 1000;\r\n        return Math.floor(second * 100) / 100;\r\n    }\r\n\r\n    now() { return new Date().getTime(); }\r\n\r\n    getDate() {\r\n        return new Date();\r\n    }\r\n\r\n    twoDigit(n) {\r\n        n = Math.floor(this.getnum(n));\r\n        n = n.mod(100) + 100;\r\n        return String(n).substring(1);\r\n    }\r\n\r\n    scale(n, l) {\r\n        var len = l.length;\r\n        for (var i = 0; i < len - 1; i++) {\r\n            if (l[0][0] == n) return l[0][1];\r\n            if (l[1][0] > n) {\r\n                var la = l[0];\r\n                var lb = l[1];\r\n                var fract = (n - la[0]) / (lb[0] - la[0]);\r\n                return la[1] + fract * (lb[1] - la[1]);\r\n            }\r\n            l = l.slice(1);\r\n        }\r\n        return n;\r\n    }\r\n\r\n    textAlign(str) {\r\n        if (['center', 'left', 'right'].indexOf(str) > -1) this.ctx.textAlign = str;\r\n        else throw \"error: \" + this.cfun + \" doesn't like \" + this.printstr(str) + ' as input';\r\n    }\r\n\r\n\r\n    mwait(n) {\r\n        if (n <= 0) return;\r\n        this.hold = true;\r\n        this.timeout = setTimeout(function () { this.timeout = undefined; this.hold = false; }.bind(this), n);\r\n    }\r\n\r\n    printstr(x) {\r\n        var type = typeof x;\r\n        if (type == 'number') return String(Math.round(x * 10000) / 10000);\r\n        if (type == 'object') {\r\n            var res = '';\r\n            for (var i in x) { res += this.printstr(x[i]); res += ' '; }\r\n            return '[' + res.substring(0, res.length - 1) + ']';\r\n        }\r\n        else return String(x);\r\n    }\r\n\r\n    getnum(x) {\r\n        var n = Number(x);\r\n        if (isNaN(n) || (String(x) == 'false') || (String(x) == 'true')) throw \"error: \" + this.cfun + \" doesn't like \" + this.printstr(x) + ' as input';\r\n        return n;\r\n    }\r\n\r\n    getlist(x) {\r\n        if ((typeof x) == 'object') return x;\r\n        throw \"error: \" + this.cfun + \" doesn't like \" + this.printstr(x) + ' as input';\r\n    }\r\n\r\n    getbool(x) {\r\n        if (String(x) == 'false') return false;\r\n        if (String(x) == 'true') return true;\r\n        throw \"error: \" + this.cfun + \" doesn't like \" + this.printstr(x) + ' as input';\r\n    }\r\n\r\n    getcolor(x) {\r\n        var type = typeof x;\r\n        if (type == 'object') throw \"error: \" + this.cfun + \" doesn't like \" + this.printstr(x) + ' as input';\r\n        if (type == 'number') return x;\r\n        var l = x.split('&');\r\n        if (l.length == 1) return Number(x);\r\n        return [Number(l[0]), Number(l[1])];\r\n    }\r\n\r\n    equals(a, b) {\r\n        if ((typeof a) != 'object') return a.toString() == b.toString();\r\n        if ((typeof b) != 'object') return a.toString() == b.toString();\r\n        if (a.length != b.length) return false;\r\n        for (var i = 0; i < a.length; i++) { if (!this.equals(a[i], b[i])) return false; }\r\n        return true;\r\n    }\r\n\r\n    stackPeek(n) { return this.stack[this.stack.length - n - 1]; }\r\n    isDone() { return (this.stack.length == 0) && (this.evline.length == 0); }\r\n\r\n\r\n\r\n    //cc js\r\n    insert(str) {\r\n        var cc = document.getElementById(\"cc\");\r\n        cc.value = cc.value + str;\r\n    }\r\n\r\n    runLine(str) {\r\n        var line = this.parse(str);\r\n        this.reset(line);\r\n    }\r\n\r\n\r\n    //comms js\r\n\r\n\r\n    readSensor(n) {\r\n        this.hold = true;\r\n        this.sendReceive([0xc0 + n], 2, this.gotsensor);\r\n        //   this.readADC(n, this.gotsensor);  readADC didn't seem necessary here\r\n    }\r\n\r\n    gotsensor(x) {\r\n        var val = x[0] + 256 * x[1];\r\n        this.arglist.pop();\r\n        this.arglist.push(val);\r\n        this.hold = false;\r\n    }\r\n\r\n    readPin(n) {\r\n        this.hold = true;\r\n        this.dread(n, this.gotpin);\r\n    }\r\n\r\n    gotpin(x) {\r\n        this.arglist.pop();\r\n        this.arglist.push(x[0] == 0);\r\n        this.hold = false;\r\n    }\r\n\r\n    ping(fcn) {\r\n        var cmd = [0xff];\r\n        this.sendReceive(cmd, 1, fcn);\r\n    }\r\n\r\n    calibrate(calibrateValues, valueToCalibrate) {\r\n        if(Array.isArray(calibrateValues)){\r\n            if(calibrateValues.length == 4){\r\n                //we assume the format is adcvalue1, realvalue1, adcvalue2, realvalue2\r\n                var slope = (calibrateValues[1] - calibrateValues[3]) / (calibrateValues[0] - calibrateValues[2]);\r\n                var value = calibrateValues[1] + (valueToCalibrate - calibrateValues[0]) * slope;\r\n                return(Math.floor(value * 100)/100);\r\n            } \r\n            //no error handling; seems like a TODO\r\n        }\r\n\r\n    }\r\n\r\n    rb(addr, fcn) {\r\n        var cmd = [].concat(0xfe, this.twobytes(addr));\r\n        this.sendReceive(cmd, 1, fcn);\r\n    }\r\n\r\n    wb(addr, data) {\r\n        var cmd = [].concat(0xfd, this.twobytes(addr), 1, data);\r\n        this.sendl(cmd);\r\n    }\r\n\r\n    pinOn(n) {\r\n        this.sendl([0xe0 + n]);\r\n    }\r\n    pinOff(n) { this.sendl([0xd0 + n]); }\r\n    ledOn() { this.sendl([0xef]); }\r\n    ledOff() { this.sendl([0xdf]); }\r\n\r\n    readADC(n, fcn) {\r\n        return this.sendReceive([0xc0 + n], 2, fcn);\r\n    }\r\n    dread(n, fcn) { this.sendReceive([0xc0 + n], 1, fcn); }\r\n\r\n    redraw(l) { this.sendl([].concat(0xb0, l)); }\r\n    dotbrightness(b) { this.sendl([0xb1, b]); }\r\n\r\n\r\n    twobytes(n) { return [n & 0xff, (n >> 8) & 0xff]; }\r\n\r\n    sendReceive(sendMessage, n, fcn) {\r\n\r\n\r\n        if (port && port.readable) {\r\n            this.respfcn = fcn;\r\n            this.resp = [];\r\n            this.respCount = n;\r\n            var message = new Uint8Array([sendMessage])\r\n            const writer = outputStream.getWriter();\r\n            writer.write(message);\r\n            writer.releaseLock();\r\n        } else {\r\n            throw \"error: not connected\";\r\n        }\r\n    }\r\n\r\n\r\n    sendl(command) {\r\n        if (outputStream) {\r\n            var message = new Uint8Array([command])\r\n            const writer = outputStream.getWriter();\r\n            writer.write(message);\r\n            writer.releaseLock();\r\n        } else {\r\n            throw \"error: not connected\";\r\n        }\r\n    }\r\n\r\n    //TODO: There's no error handling for disconnect/reconnect events. This assumes everything works perfectly.\r\n    //Add a state to track if the connection is live. \r\n\r\n    async openSerialPort() {\r\n        port = await navigator.serial.requestPort();\r\n        await port.open({ baudRate: 115200 });\r\n        reader = port.readable.getReader();\r\n        outputStream = port.writable;\r\n        document.getElementById(\"connectButton\").style.display = \"none\";\r\n        document.getElementById(\"disconnectButton\").style.display = \"inline-block\";\r\n        this.startReading();\r\n    }\r\n\r\n    async disconnectSerialPort() {\r\n        if (port) {\r\n            if (reader) {\r\n                await reader.cancel();\r\n                reader = null;\r\n            }\r\n            if (outputStream) {\r\n                await outputStream.getWriter().close();\r\n                outputStream = null;\r\n            }\r\n            await port.close();\r\n            port = null;\r\n            document.getElementById(\"connectButton\").style.display = \"inline-block\";\r\n            document.getElementById(\"disconnectButton\").style.display = \"none\";\r\n        } else { }\r\n\r\n    }\r\n\r\n\r\n    async startReading() {\r\n        while (true) {\r\n            const { value, done } = await reader.read();\r\n            if (value) {\r\n                var newValue;\r\n                this.handleReceiveData(value);\r\n                if (value[1] != 0) {\r\n                    newValue = value[0] + 256 * value[1]\r\n                } else {\r\n                    newValue = value[0];\r\n                }\r\n                this.allReceivedData.push(newValue);\r\n\r\n            }\r\n            if (done) {\r\n                reader.releaseLock();\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    handleReceiveData(receivedValue) {\r\n        var value = Array.from(new Uint8Array(receivedValue));\r\n        for (var i in value) {\r\n            this.gotChar(value[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    gotChar(c) {\r\n        if (this.respCount == 0) return;\r\n        else {\r\n            this.resp.push(c);\r\n            if (this.respCount > this.resp.length) return;\r\n            if (this.respfcn) {\r\n                this.respfcn(this.resp);\r\n                this.respCount = 0;\r\n                this.resp = [];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport var prims = {};\r\n\r\nprims['calibrate'] = { nargs: 2, fcn: function(a, b) { return this.calibrate(a, b) }}\r\nprims['logData'] = { nargs: 1, fcn: function(a) { this.pushToTable(a) }}\r\nprims['repeat'] = { nargs: 2, flow: true, fcn: function (a, b) { this.repeat(a, b); } }\r\nprims['forever'] = { nargs: 1, flow: true, fcn: function (a) { this.loop(a); } }\r\nprims['loop'] = { nargs: 1, flow: true, fcn: function (a) { this.loop(a); } }\r\nprims['if'] = { nargs: 2, flow: true, fcn: function (a, b) { this.logo_if(this.getbool(a), b); } }\r\nprims['ifelse'] = { nargs: 3, flow: true, fcn: function (a, t, f) { this.logo_ifelse(this.getbool(a), t, f); } }\r\nprims['run'] = { nargs: 1, flow: true, fcn: function (l) { this.logo_run(l); } }\r\n\r\nprims['stop'] = { nargs: 0, flow: true, fcn: function () { this.procOutput(this); } }\r\nprims['output'] = { nargs: 1, flow: true, fcn: function (x) { return this.procOutput(this, x); } }\r\nprims['wait'] = { nargs: 1, fcn: function (x) { this.mwait(100 * this.getnum(x)); } }\r\n\r\nprims['+'] = { nargs: 2, priority: -1, fcn: function (a, b) { return a + b; } }\r\nprims['-'] = { nargs: 2, priority: -1, fcn: function (a, b) { return a - b; } }\r\nprims['*'] = { nargs: 2, priority: -2, fcn: function (a, b) { return a * b; } }\r\nprims['/'] = { nargs: 2, priority: -2, fcn: function (a, b) { return a / b; } }\r\nprims['='] = { nargs: 2, priority: -2, fcn: function (a, b) { return this.equals(a, b); } }\r\nprims['!='] = { nargs: 2, priority: -2, fcn: function (a, b) { return !this.equals(a, b); } }\r\nprims['>'] = { nargs: 2, priority: -2, fcn: function (a, b) { return a > b; } }\r\nprims['<'] = { nargs: 2, priority: -2, fcn: function (a, b) { return a < b; } }\r\nprims['remainder'] = { nargs: 2, fcn: function (a, b) { return this.getnum(a).mod(this.getnum(b)); } }\r\nprims['round'] = { nargs: 1, fcn: function (a) { return Math.round(this.getnum(a)); } }\r\nprims['int'] = { nargs: 1, fcn: function (a) { return Math.floor(this.getnum(a)); } }\r\nprims['minus'] = { nargs: 1, fcn: function (a) { return -a; } }\r\nprims['sin'] = { nargs: 1, fcn: function (a) { return turtleMath.sindeg(this.getnum(a)); } }\r\nprims['cos'] = { nargs: 1, fcn: function (a) { return turtleMath.cosdeg(this.getnum(a)); } }\r\nprims['sqrt'] = { nargs: 1, fcn: function (a) { return Math.sqrt(this.getnum(a)); } }\r\nprims['random2'] = { nargs: 2, fcn: function (a, b) { return this.random.pickRandom(a, b); } }\r\nprims['oneof'] = { nargs: 2, fcn: function (a, b) { return this.random.oneof(a, b); } }\r\n\r\nprims['sum'] = { nargs: 2, fcn: function (a, b) { return a + b; } }\r\nprims['product'] = { nargs: 2, fcn: function (a, b) { return a * b; } }\r\n\r\nprims['se'] = { nargs: 2, fcn: function (a, b) { return [].concat(a, b); } }\r\nprims['word'] = { nargs: 2, fcn: function (a, b) { return this.word(a, b); } }\r\nprims['first'] = { nargs: 1, fcn: function (a) { return this.first(a); } }\r\nprims['butfirst'] = { nargs: 1, fcn: function (a) { return this.butfirst(a); } }\r\nprims['bf'] = { nargs: 1, fcn: function (a) { return this.butfirst(a); } }\r\nprims['last'] = { nargs: 1, fcn: function (a) { return this.last(a); } }\r\nprims['bl'] = { nargs: 1, fcn: function (a) { return this.butlast(a); } }\r\nprims['fput'] = {\r\n    nargs: 2, fcn: function (a, b) {\r\n        var res = [].concat(this.getlist(b));\r\n        //res.unshift(a); \r\n        return res;\r\n    }\r\n}\r\nprims['lput'] = { nargs: 2, fcn: function (a, b) { var res = [].concat(this.getlist(b)); res.push(a); return res; } }\r\nprims['count'] = { nargs: 1, fcn: function (a) { return this.count(a); } }\r\nprims['item'] = { nargs: 2, fcn: function (n, l) { return this.item(n, l); } }\r\nprims['nth'] = { nargs: 2, fcn: function (n, l) { return this.getlist(l)[this.getnum(n)]; } }\r\nprims['setnth'] = { nargs: 3, fcn: function (n, l, d) { this.getlist(l)[this.getnum(n)] = d; } }\r\nprims['member?'] = { nargs: 2, fcn: function (x, l) { return this.member(x, l); } }\r\nprims['empty?'] = { nargs: 1, fcn: function (l) { return l.length == 0; } }\r\nprims['pick'] = { nargs: 1, fcn: function (l) { return l[this.random.pickRandom(0, this.getlist(l).length - 1)]; } }\r\n\r\nprims['print'] = { nargs: 1, fcn: function (x) { this.printToConsole(this.printstr(x)); } }\r\n\r\nprims['clean'] = { nargs: 0, fcn: function (n) { this.clean(); } }\r\nprims['forward'] = { nargs: 1, fcn: function (n) { this.forward(this.getnum(n)); } }\r\nprims['fd'] = { nargs: 1, fcn: function (n) { this.forward(this.getnum(n)); } }\r\nprims['back'] = { nargs: 1, fcn: function (n) { this.forward(this.getnum(-n)); } }\r\nprims['bk'] = { nargs: 1, fcn: function (n) { this.forward(this.getnum(-n)); } }\r\nprims['right'] = { nargs: 1, fcn: function (n) { this.right(this.getnum(n)); } }\r\nprims['rt'] = { nargs: 1, fcn: function (n) { this.right(this.getnum(n)); } }\r\nprims['left'] = { nargs: 1, fcn: function (n) { this.right(this.getnum(-n)); } }\r\nprims['lt'] = { nargs: 1, fcn: function (n) { this.right(this.getnum(-n)); } }\r\nprims['setheading'] = { nargs: 1, fcn: function (n) { this.seth(this.getnum(n)); } }\r\nprims['seth'] = { nargs: 1, fcn: function (n) { this.seth(this.getnum(n)); } }\r\nprims['setxy'] = { nargs: 2, fcn: function (x, y) { this.setxy(this.getnum(x), this.getnum(y)); } }\r\nprims['lineto'] = { nargs: 2, fcn: function (x, y) { this.lineto(this.getnum(x), this.getnum(y)); } }\r\nprims['arc'] = { nargs: 2, fcn: function (a, r) { this.arc(this.getnum(a), this.getnum(r)); } }\r\n\r\nprims['fillscreen'] = { nargs: 2, fcn: function (c, s) { this.fillscreen(this.getcolor(c), s); } }\r\nprims['setcolor'] = { nargs: 1, fcn: function (n) { this.setcolor(this.getcolor(n)); } }\r\nprims['setc'] = { nargs: 1, fcn: function (n) { this.setcolor(this.getcolor(n)); } }\r\nprims['setshade'] = { nargs: 1, fcn: function (n) { this.setshade(n); } }\r\nprims['setsh'] = { nargs: 1, fcn: function (n) { this.setshade(n); } }\r\nprims['setpensize'] = { nargs: 1, fcn: function (n) { this.setpensize(n); } }\r\nprims['setps'] = { nargs: 1, fcn: function (n) { this.setpensize(n); } }\r\nprims['pendown'] = { nargs: 0, fcn: function (n) { this.pendown = true; } }\r\nprims['pd'] = { nargs: 0, fcn: function (n) { this.pendown = true; } }\r\nprims['penup'] = { nargs: 0, fcn: function (n) { this.pendown = false; } }\r\nprims['pu'] = { nargs: 0, fcn: function (n) { this.pendown = false; } }\r\nprims['startfill'] = { nargs: 0, fcn: function () { this.startfill(); } }\r\nprims['endfill'] = { nargs: 0, fcn: function () { this.endfill(); } }\r\nprims['setopacity'] = { nargs: 1, fcn: function (n) { this.opacity = this.getnum(n) / 100; } }\r\n\r\nprims['drawtext'] = { nargs: 1, fcn: function (str) { this.drawString(this.printstr(str)); } }\r\nprims['textalign'] = { nargs: 1, fcn: function (str) { this.textAlign(str); } }\r\nprims['setfont'] = { nargs: 1, fcn: function (f) { this.setfont(f); } }\r\nprims['setfontsize'] = { nargs: 1, fcn: function (s) { this.setfontsize(s); } }\r\nprims['setlinestyle'] = { nargs: 1, fcn: function (l) { this.setlinedash(l); } }\r\n\r\nprims['xcor'] = { nargs: 0, fcn: function (n) { return this.xcor; } }\r\nprims['ycor'] = { nargs: 0, fcn: function (n) { return this.ycor; } }\r\nprims['heading'] = { nargs: 0, fcn: function (n) { return this.heading; } }\r\nprims['color'] = { nargs: 0, fcn: function (n) { return this.color; } }\r\nprims['shade'] = { nargs: 0, fcn: function (n) { return this.shade; } }\r\nprims['pensize'] = { nargs: 0, fcn: function (n) { return this.pensize; } }\r\nprims['opacity'] = { nargs: 0, fcn: function (n) { return 100 * this.opacity; } }\r\n\r\nprims['hideturtle'] = { nargs: 0, fcn: function (n) { this.hideTurtle(); } }\r\nprims['ht'] = { nargs: 0, fcn: function (n) { this.hideTurtle(); } }\r\nprims['showturtle'] = { nargs: 0, fcn: function (n) { this.showTurtle(); } }\r\nprims['st'] = { nargs: 0, fcn: function (n) { this.showTurtle(); } }\r\n\r\n//prims['snapimage'] = {nargs: 1, fcn: function(n){ this.snaps[n] = canvas.toDataURL();}}\r\nprims['drawsnap'] = { nargs: 1, fcn: function (n) { this.hold = true; this.loadimg(this.snaps[n], function () { this.hold = false; }); } }\r\n\r\nprims['flushtime'] = { nargs: 1, fcn: function (n) { flushtime = this.getnum(n); } }\r\n\r\nprims['( '] = { nargs: 1, fcn: function (x) { this.evline.shift(); return x; } }\r\nprims['se '] = { nargs: 'ipm', fcn: function () { return this.ipm_se(arguments); } }\r\n\r\n\r\nprims['storeinbox1'] = { nargs: 1, fcn: function (n) { this.boxes[0] = n; } }\r\nprims['box1'] = { nargs: 0, fcn: function () { return this.boxes[0]; } }\r\nprims['storeinbox2'] = { nargs: 1, fcn: function (n) { this.boxes[1] = n; } }\r\nprims['box2'] = { nargs: 0, fcn: function () { return this.boxes[1]; } }\r\nprims['storeinbox3'] = { nargs: 1, fcn: function (n) { this.boxes[2] = n; } }\r\nprims['box3'] = { nargs: 0, fcn: function () { return this.boxes[2]; } }\r\nprims ['now'] = {nargs: 0, fcn: function () {return Math.floor(Date.now()/1000)}}\r\n\r\nprims['resett'] = { nargs: 0, fcn: function (n) { this.resett(); } }\r\nprims['timer'] = { nargs: 0, fcn: function () { return this.timer(); } }\r\nprims['unixtime'] = { nargs: 0, fcn: function () { return Math.floor(Date.now() / 1000); } }\r\nprims['time'] = { nargs: 0, fcn: function () { return this.time(); } }\r\nprims['hours'] = { nargs: 0, fcn: function () { return this.hours(); } }\r\nprims['minutes'] = { nargs: 0, fcn: function () { return this.minutes(); } }\r\nprims['seconds'] = { nargs: 0, fcn: function () { return this.seconds(); } }\r\nprims['2digit'] = { nargs: 1, fcn: function (n) { return this.twoDigit(n); } }\r\nprims['clockspeed'] = { nargs: 1, fcn: function (n) { this.clockspeed = this.getnum(n); } }\r\nprims['scale'] = { nargs: 2, fcn: function (n, l) { return this.scale(this.getnum(n), this.getlist(l)); } }\r\n\r\nprims['true'] = { nargs: 0, fcn: function () { return true; } }\r\nprims['false'] = { nargs: 0, fcn: function () { return false; } }\r\n\r\nprims['make'] = { nargs: 2, fcn: function (a, b) { this.setValue(a, b); } }\r\nprims['let'] = { nargs: 2, fcn: function (a, b) { this.setValue(a, b); } }\r\n//This is only for backwards compatability. Let is not different from make right now.\r\n\r\nprims['local'] = { nargs: 1, fcn: function (a, b) { this.makeLocal(a); } }\r\nprims['openport'] = { nargs: 0, fcn: function () { this.openSerialPort(); } }\r\n\r\nprims['ob1on'] = { nargs: 0, fcn: function () { this.ledOn(); this.mwait(1); } }\r\nprims['ob1off'] = { nargs: 0, fcn: function () { this.ledOff(); this.mwait(1); } }\r\n\r\nprims['dp2on'] = { nargs: 0, fcn: function () { this.pinOn(2); this.mwait(1); } }\r\nprims['dp2off'] = { nargs: 0, fcn: function () { this.pinOff(2); this.mwait(1); } }\r\nprims['dp3on'] = { nargs: 0, fcn: function () { this.pinOn(3); this.mwait(1); } }\r\nprims['dp3off'] = { nargs: 0, fcn: function () { this.pinOff(3); this.mwait(1); } }\r\nprims['dp4on'] = { nargs: 0, fcn: function () { this.pinOn(4); this.mwait(1); } }\r\nprims['dp4off'] = { nargs: 0, fcn: function () { this.pinOff(4); this.mwait(1); } }\r\nprims['dp5on'] = { nargs: 0, fcn: function () { this.pinOn(5); this.mwait(1); } }\r\nprims['dp5off'] = { nargs: 0, fcn: function () { this.pinOff(5); this.mwait(1); } }\r\nprims['dp6on'] = { nargs: 0, fcn: function () { this.pinOn(6); this.mwait(1); } }\r\nprims['dp6off'] = { nargs: 0, fcn: function () { this.pinOff(6); this.mwait(1); } }\r\nprims['dp7on'] = { nargs: 0, fcn: function () { this.pinOn(7); this.mwait(1); } }\r\nprims['dp7off'] = { nargs: 0, fcn: function () { this.pinOff(7); this.mwait(1); } }\r\nprims['lineto'] = { nargs: 2, fcn: function (a, b) { this.drawLine(a, b); } }\r\n\r\nprims['read0'] = { nargs: 0, fcn: function () { this.readSensor(0); return this.cfun; } }\r\nprims['read1'] = { nargs: 0, fcn: function () { this.readSensor(1); return this.cfun; } }\r\nprims['read2'] = { nargs: 0, fcn: function () { this.readSensor(2); return this.cfun; } }\r\nprims['read3'] = { nargs: 0, fcn: function () { this.readSensor(3); return this.cfun; } }\r\nprims['read4'] = { nargs: 0, fcn: function () { this.readSensor(4); return this.cfun; } }\r\nprims['read5'] = { nargs: 0, fcn: function () { this.readSensor(5); return this.cfun; } }\r\n\r\nprims['connected8'] = { nargs: 0, fcn: function () { this.readPin(8); return this.cfun; } }\r\nprims['connected9'] = { nargs: 0, fcn: function () { this.readPin(9); return this.cfun; } }\r\nprims['connected10'] = { nargs: 0, fcn: function () { this.readPin(10); return this.cfun; } }\r\nprims['connected11'] = { nargs: 0, fcn: function () { this.readPin(11); return this.cfun; } }\r\nprims['connected12'] = { nargs: 0, fcn: function () { this.readPin(12); return this.cfun; } }\r\nprims['chartpush'] = { nargs: 2, fcn: function (a, b) { this.addToChart(a, b); } }","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\data\\experiments.js",[],"C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\DataTable.js",[],"C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\Chart.js",["93","94"],"import React, { Component } from 'react';\r\nimport '../css/styles.css';\r\nimport '../css/layout.css';\r\nimport { Scatter } from 'react-chartjs-2'\r\n\r\nexport default class Chart extends Component {\r\n\r\n    chartRef = {}\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ height: \"100%\", width: \"100%\" }}>\r\n                {this.props.chartType == \"Single Scatter\" ?\r\n                    <Scatter\r\n                        data={{\r\n                            datasets:\r\n                                [\r\n                                    {\r\n                                        label: \"Temp. vs Time\",\r\n                                        data: this.props.chartData\r\n                                    }\r\n\r\n                                ]\r\n                        }}\r\n\r\n\r\n                        options={{\r\n                            responsive: true,\r\n                            maintainAspectRatio: false,\r\n                            animation: {\r\n                                duration: 0\r\n                            },\r\n                            elements: {\r\n                                point: {\r\n                                    radius: 4,\r\n                                    backgroundColor: \"black\"\r\n                                }\r\n                            }\r\n                        }\r\n                        }\r\n                        redraw={true}\r\n                        ref={this.chartReference}\r\n                    />\r\n                    :\r\n\r\n                    this.props.chartType == \"Double Scatter\" ?\r\n                        <>\r\n                        <div style={{ height: \"50%\" }}>\r\n                            <Scatter\r\n                                data={{\r\n                                    datasets:\r\n                                        [\r\n                                            {\r\n                                                label: \"Temp. vs Time\",\r\n                                                data: this.props.chartData\r\n                                            }\r\n\r\n                                        ]\r\n                                }}\r\n\r\n\r\n                                options={{\r\n                                    responsive: true,\r\n                                    maintainAspectRatio: false,\r\n                                    animation: {\r\n                                        duration: 0\r\n                                    },\r\n                                    elements: {\r\n                                        point: {\r\n                                            radius: 4,\r\n                                            backgroundColor: \"black\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                                }\r\n                                redraw={true}\r\n                                ref={this.chartReference}\r\n                            />\r\n                        </div>\r\n                        \r\n                         <div style={{ height: \"50%\" }}>\r\n                         <Scatter\r\n                             data={{\r\n                                 datasets:\r\n                                     [\r\n                                         {\r\n                                             label: \"Temp. vs Time\",\r\n                                             data: this.props.chartData\r\n                                         }\r\n\r\n                                     ]\r\n                             }}\r\n\r\n\r\n                             options={{\r\n                                 responsive: true,\r\n                                 maintainAspectRatio: false,\r\n                                 animation: {\r\n                                     duration: 0\r\n                                 },\r\n                                 elements: {\r\n                                     point: {\r\n                                         radius: 4,\r\n                                         backgroundColor: \"black\"\r\n                                     }\r\n                                 }\r\n                             }\r\n                             }\r\n                             redraw={true}\r\n                             ref={this.chartReference}\r\n                         />\r\n                     </div>\r\n                     </>\r\n\r\n                        : null\r\n\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}   ","C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\interpreter\\turtleMath.js",[],"C:\\Users\\clewi\\git\\lbym-web-app\\site\\src\\components\\interpreter\\Tokenizer.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":5,"column":28,"nodeType":"101","messageId":"102","endLine":5,"endColumn":37},{"ruleId":"99","severity":1,"message":"103","line":15,"column":10,"nodeType":"101","messageId":"102","endLine":15,"endColumn":17},{"ruleId":"99","severity":1,"message":"104","line":17,"column":17,"nodeType":"101","messageId":"102","endLine":17,"endColumn":32},{"ruleId":"99","severity":1,"message":"105","line":58,"column":5,"nodeType":"101","messageId":"102","endLine":58,"endColumn":18},{"ruleId":"99","severity":1,"message":"104","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":32},{"ruleId":"106","severity":1,"message":"107","line":4,"column":21,"nodeType":"108","messageId":"109","endLine":4,"endColumn":30,"fix":"110"},{"ruleId":"111","severity":1,"message":"112","line":36,"column":21,"nodeType":"113","endLine":36,"endColumn":55},{"ruleId":"111","severity":1,"message":"112","line":40,"column":21,"nodeType":"113","endLine":40,"endColumn":53},{"ruleId":"111","severity":1,"message":"112","line":44,"column":21,"nodeType":"113","endLine":44,"endColumn":51},{"ruleId":"111","severity":1,"message":"112","line":48,"column":21,"nodeType":"113","endLine":48,"endColumn":57},{"ruleId":"111","severity":1,"message":"112","line":52,"column":21,"nodeType":"113","endLine":52,"endColumn":57},{"ruleId":"99","severity":1,"message":"103","line":5,"column":10,"nodeType":"101","messageId":"102","endLine":5,"endColumn":17},{"ruleId":"99","severity":1,"message":"114","line":14,"column":5,"nodeType":"101","messageId":"102","endLine":14,"endColumn":16},{"ruleId":"115","severity":1,"message":"116","line":64,"column":53,"nodeType":"117","messageId":"118","endLine":64,"endColumn":55},{"ruleId":"115","severity":1,"message":"116","line":75,"column":61,"nodeType":"117","messageId":"118","endLine":75,"endColumn":63},{"ruleId":"115","severity":1,"message":"116","line":81,"column":60,"nodeType":"117","messageId":"118","endLine":81,"endColumn":62},{"ruleId":"119","severity":1,"message":"120","line":42,"column":58,"nodeType":"121","messageId":"122","endLine":46,"endColumn":30},{"ruleId":"123","severity":1,"message":"124","line":427,"column":13,"nodeType":"101","messageId":"125","endLine":427,"endColumn":14},{"ruleId":"126","severity":1,"message":"127","line":1378,"column":1,"nodeType":"128","messageId":"129","endLine":1378,"endColumn":14,"fix":"130"},{"ruleId":"115","severity":1,"message":"116","line":14,"column":39,"nodeType":"117","messageId":"118","endLine":14,"endColumn":41},{"ruleId":"115","severity":1,"message":"116","line":47,"column":42,"nodeType":"117","messageId":"118","endLine":47,"endColumn":44},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'options' is defined but never used.","'DBCoreRangeType' is defined but never used.","'localDatabase' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"133","text":"134"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'interpreter' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'request', 'request', 'request'.","FunctionExpression","unsafeRefs","no-redeclare","'t' is already defined.","redeclared","no-whitespace-before-property","Unexpected whitespace before property 'now'.","MemberExpression","unexpectedWhitespace",{"range":"135","text":"136"},"no-global-assign","no-unsafe-negation",[103,103],"()",[48304,48305],""]