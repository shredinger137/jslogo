;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;; Water Soil ;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;

to run-once-soil
    ;initalize variables
    init

    ;set options for packets
    set-packet-count 2
    set-packet-save true
    clear-data

    ;set up plots
    init-plot-soil

    loop [
        ;stop after 15 minutes
        if ((now - :startTime) > (15 * 60)) [
            stop
        ]
        dp4on
        wait 5
        receive-packet
        wait 5
        dp4off
        make "time-list se (:time-list) (now - :startTime)
        process-soil-packet :_last-packet
        wait 50   ;waits for 15 seconds
    ]

end

to run-forever-soil
    ;initalize variables
    init

    ;set options for packets
    set-packet-count 2
    set-packet-save true
    clear-data

    ;set up plots
    init-plot-soil

    loop [
        ;stop after 24 hours
        if ((now - :startTime) > (60 * 60 * 24)) [
            stop
        ]
        dp4on
        wait 5
        receive-packet
        wait 5
        dp4off

        ;time-list in hours with two decimal places
        make "time-list se (:time-list) (round ((now - :startTime)  * (100 / 3600 )) / 100)
        process-soil-packet :_last-packet
        wait 3000   ;waits for 5 minutes
    ]

end
 
to run-once-evap
    ;initalize variables
    init

    ;set options for packets
    set-packet-count 2
    set-packet-save true
    clear-data

    ;setup plots
    init-plot-evap

    loop [
        ;run this for 20 minutes, and then stop.  
        if ((now - :startTime) > ( 60 * 20 )) [ stop ]
        receive-packet
        process-evap-packet :_last-packet
        make "time-list se (:time-list) (now - :startTime)
        wait 100 ;wait for 10 seconds
    ]
end

to run-forever-evap
    ;initalize variables
    init

    ;set options for packets
    set-packet-count 2
    set-packet-save true
    clear-data

    ;setup plots
    init-plot-evap

    loop [
        ;run until manually stopped
        receive-packet
        process-evap-packet :_last-packet
        make "time-list se (:time-list) (round ((now - :startTime)  * (100 / 3600 )) / 100)
        wait 6000 ;wait for 10 minutes
    ]
end

to init
    print 'Starting Project'
    make "startTime now

    ;initiatlize variables

    ;lists for collected data and time
    make "time-list []
    make "temp0-data []
    make "temp1-data []
    make "moisture-data []

    ;calibration numbers for moisture sensor and two temp sensors
    make "moisture-cal []
    make "temp0-cal [116 0 161 26]
    make "temp1-cal [116 0 161 26]

    ;lists of calibrated data for plotting
    make "temp0-calibrated []
    make "temp1-calibrated []
    make "moisture-calibrated []

end

;handles a packet after it has been received
to process-soil-packet :packet
    
    ;Read packet information, add time and data to lists,
    ;calibrate for display

    make "moisture-data se (:moisture-data) (nth 3 :packet)
    make "temp1-data se (:temp1-data) (nth 4 :packet)
    make "moisture-calibrated :moisture-data 
    calibrate-list "temp1-calibrated :temp1-data :temp1-cal
end

to process-evap-packet :packet
    ;add readings and time to relevant lists
    make "temp0-data se (:temp0-data) (nth 3 :packet)
    make "temp1-data se (:temp1-data) (nth 4 :packet)

    calibrate-list "temp0-calibrated :temp0-data :temp0-cal
    calibrate-list "temp1-calibrated :temp1-data :temp1-cal
end

to init-plot-soil
    top-plot
    plot-title 'Soil Moisture'
    x-data "time-list
    y-data "moisture-calibrated

    ;limits-y 620 900 
        ; Use limits and set the values as needed.
        ; Might be needed if autoscale doesn't return
        ; a usable plot with enough detail or zoom out
        ; if there is too much scatter to see trends.
        ; If the soil is very dry a lower limit value
        ; of 620 will work. The moisture sensor doesn't
        ; report much above 890. A value of 900 is
        ; reasonable as a good upper limit. If the soil
        ; has some moisture in it, values of 820 - 900
        ; are reasonable.
    
    x-label 'Time'
    show-plot

    bottom-plot
    plot-title 'Temp'
    x-data "time-list
    y-data "temp1-calibrated
    limits-y 10 40
    x-label 'Time'
    show-plot

end

to init-plot-evap
    top-plot
    plot-title 'Leashed Temp Sensor'
    x-data "time-list
    y-data "temp0-calibrated
    x-label 'Time'
    limits-y 5 30
    show-plot

    bottom-plot
    plot-title 'Temp Sensor on Board'
    x-data "time-list
    y-data "temp1-calibrated
    x-label 'Time'
    limits-y 5 30
    show-plot
end

 

to cal-moisture-sensor :m_val :t_val

    ; Let's define constant and temperature adu corresponding to
    ; room temp.
    let "c_not 1.8 ; Constant is an average moisture adu / temp adu
                   ; under various soil and moisture conditions.
                   ; The number 5.3 is a reasonable value if the
                   ; the assumption is soil has some moisture
                   ; content in it. If including averages with
                   ; drier soil samples, the value can be closer
                   ; to 5.1. TODO: examine calculation of c_not
                   ; more closely. The moisture adu swings are
                   ; too wide. The constant might actually be
                   ; a smaller number.

    let "t_env 150 ; Average temperature adu for room temp (20*C).

    ; Apply our differental equation resultant formula to the
    ; input values.
    let "m_final :m_val + (:c_not * (:t_env - :t_val))
   
    ; Output the value.
    output round :m_final

end